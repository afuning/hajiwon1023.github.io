<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/13/hello-world/"/>
      <url>/2019/01/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>那些前端组踩过的坑</title>
      <link href="/2018/12/11/%E9%82%A3%E4%BA%9B%E5%89%8D%E7%AB%AF%E7%BB%84%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
      <url>/2018/12/11/%E9%82%A3%E4%BA%9B%E5%89%8D%E7%AB%AF%E7%BB%84%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<!--toc--><h2 id="兼容性">兼容性</h2><p>问题：<em>华为部分浏览器不兼容position:fixed，出现向下移位的问题</em></p><blockquote><p>设置定位时设置bottom:auto</p></blockquote><h2 id="博客相关">博客相关</h2><p>问题：<em>Hexo toc即侧边栏点击后跳转#undefined</em></p><blockquote><p>原因是hexo-toc插件不兼容新版的markdown编译后的html，因此，应对hexo-toc中filter.js进行代码修改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = toc.slugify(title, options);</span><br><span class="line">$title.attr(<span class="string">'id'</span>, id);</span><br><span class="line"><span class="comment">// $title.children('a').remove();</span></span><br><span class="line"><span class="comment">// $title.html( `&lt;span id="$&#123;id&#125;"&gt;$&#123;$title.html()&#125;&lt;/span&gt;` );</span></span><br><span class="line"><span class="comment">// $title.removeAttr('id');</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="vue相关问题">vue相关问题</h2><p>问题：<em>vue-router的返回功能出现无法使用，back</em></p><blockquote><p>有可能是因为全局守卫里面未调用next()所致</p></blockquote><p>问题：<em>父组件与子组件之间mount和created执行顺序</em></p><blockquote><p>父created=&gt;子created=&gt;子mounted=&gt;父mounted</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 企朋 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>时间复杂度和空间复杂度</title>
      <link href="/2018/12/10/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2018/12/10/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<!--toc--><blockquote><p>前言：作为一个<s>勤奋</s><strong>得过且过</strong>的前端，感觉算法离得好遥远。最近突然奋发向上，想要了解一下算法这玩意儿是啥？然后发现了一个叫<a href="https://leetcode-cn.com/problemset/all/" target="_blank" rel="noopener">leetcode</a>的算法网站，盲目做了几道题，偷偷看了几题的算法解答。发现有一个复杂度分析的东西，这东西又分为时间复杂度和空间复杂度。为了了解自己的算法有多烂，当然我要了解这时间复杂度和空间复杂度是什么东西？</p></blockquote><h2 id="时间复杂度time-complexity">时间复杂度（Time Complexity）</h2><p>顾名思义就是和时间有关的，那就是运行时间长短的事儿了。根据维基百科定义：</p><blockquote><p>算法的时间复杂度是一个函数，它定性描述该算法的运行时间。常用大O符号表述，不包括这个函数的低阶项和首项系数。</p></blockquote><h3 id="公式">公式</h3><p>记作：T(n) = Ｏ(f(n));这里面的n应该表示的是一个随机的正整数，而T(n)则是当n为某个随机正整数时，所要执行的运算时间，学术名叫做<strong>时间频度</strong>，Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。值得注意的是时间频度不同，但时间复杂度可能相同，如：T(n) = n^2 + 2n + 3 和 T(n) = 2n^2 + 1 中频度不同，但时间复杂度相同，都为O(n^2)。</p><h3 id="计算公式">计算公式</h3><p>那么如何得到f(n)?</p><p>例如：计算一个1+2+3+……+10+……+n第一种算法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;<span class="comment">// 执行1次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123; <span class="comment">// 执行n + 1次</span></span><br><span class="line">    result += i;  <span class="comment">// 执行n次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;<span class="comment">// 执行1次</span></span><br></pre></td></tr></table></figure><p>第二种算法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>; <span class="comment">// 执行1次</span></span><br><span class="line">result = (<span class="number">1</span> + n) * n / <span class="number">2</span>; <span class="comment">// 执行1次</span></span><br><span class="line"><span class="keyword">return</span> result; <span class="comment">// 执行1次</span></span><br></pre></td></tr></table></figure><p>第一种算法执行次数：1 + n + 1 + n + 1 = 2n + 3;因此该算法执行了2n + 3;第二种算法执行次数： 1 + 1 + 1 ；因此该算法执行了3；按照不包括这个函数的低阶项和首项系数的原则。则这两个算法的时间复杂度分别为O(n)和O(1)</p><h2 id="空间复杂度space-complexity">空间复杂度（Space Complexity）</h2><p>是指一个程序运行完所需内存的大小，空间复杂度则是预先对所需内存进行估计。存储空间主要包含以下两个部分：</p><ol><li><p><strong>固定部分</strong>，与输入输出的数据大小无关。主要包括指令空间（即代码）、数据空间（即常量，简单变量）所占空间。这部分称为静态空间</p></li><li><p><strong>可变部分</strong>，主要包括动态分布空间、递归所需空间，顾名思义与固定部分相反，是与输入输出大小有关。这部分空间是衡量算法的空间复杂度的主要部分。</p></li></ol><p>用公式记作：<strong>S(n)=O(f(n))</strong>；n为问题的规模，S(n)表示空间复杂度，存储空间用f(n)表示</p><h2 id="结尾">结尾</h2><p>对于一个算法，空间复杂度和时间复杂度往往是相互影响的，当追求时间复杂度时，往往空间复杂度的性能变差，反之亦然。因此当设计一个算法时，要权衡利弊，综合算法的各项性能、机器的环境，使用频率，数据量大小，描述语言特性等来设计出较好的算法。两者复杂度合称为算法的复杂度</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅谈HTTP原理</title>
      <link href="/2018/12/07/%E6%B5%85%E8%B0%88HTTP%E5%8E%9F%E7%90%86/"/>
      <url>/2018/12/07/%E6%B5%85%E8%B0%88HTTP%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!--toc--><h2 id="http到底是什么">HTTP到底是什么</h2><p>缩  写：<strong>HTTP</strong><br>英文名：<strong>HyperText Transfer Protocol</strong> <em>（称[haɪpə(r)][prəʊtəkɒl]）</em><br>中文名：<strong>超文本传输协议</strong><br>角  色：<strong>万维网的数据通信基础</strong><br>位  置：<strong>7层OSI模型的应用层<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></strong></p><h3 id="又称因特网的多媒体信使">又称：因特网的多媒体信使</h3><p>提问：<em>众所周知信使是用来送信的，那么，HTTP送的是什么</em></p><blockquote><p>客户端发送<strong>HTTP请求</strong>给服务器，服务器发送<strong>HTTP响应</strong>给客户端。一个请求和一个响应称为一个<strong>HTTP事务</strong>，其中带有的资源<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>、URI<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>相当于快递员送的包裹以及包裹地址</p></blockquote><p>提问：<em>HTTP所送的包裹是怎么样的呢？</em></p><blockquote><p><strong>HTTP事务</strong>是通过名为HTTP报文的格式化数据块进行的。既然HTTP是英特网的信使，那么<strong>报文</strong>就是他用来搬东西的包裹。</p></blockquote><p>提问：<em>既然报文是包裹，那么其组成部分怎么样的？</em></p><blockquote><p>首先<strong>HTTP报文</strong>是简单的格式化数据块。每条报文由三部分组成：对报文进行描述的<strong>起始行</strong>、包含属性的<strong>部首块</strong>、可选的、包含数据的<strong>主体</strong>部分。</p></blockquote><p>如图所示为两类HTTP报文：<img src="http://www.nomiwan.com/HTTP%E6%8A%A5%E6%96%87.jpg" alt="两类HTTP报文"></p><ol><li>请求行包含一个方法，一个请求URL以及版本（1.0前不需要版本</li><li>响应行包含版本、数字状态码、以及原因短语，如表格所示数字状态码的大致含义：</li></ol><table><thead><tr><th style="text-align:center">整体范围</th><th style="text-align:center">已定义范围</th><th style="text-align:left">分类</th></tr></thead><tbody><tr><td style="text-align:center">100～199</td><td style="text-align:center">100～101</td><td style="text-align:left">信息提示</td></tr><tr><td style="text-align:center">200～299</td><td style="text-align:center">200～206</td><td style="text-align:left">成功</td></tr><tr><td style="text-align:center">300～399</td><td style="text-align:center">300～305</td><td style="text-align:left">重定向</td></tr><tr><td style="text-align:center">400～499</td><td style="text-align:center">400～415</td><td style="text-align:left">客户端错误</td></tr><tr><td style="text-align:center">500～599</td><td style="text-align:center">500～505</td><td style="text-align:left">服务器错误</td></tr></tbody></table><ol start="3"><li>可选的实体主体是报文的负荷，要传输的内容。</li><li>首部从本质来说只是一些名/值对的列表。其中可分为以下几类：</li></ol><ul><li>通用首部：存在两类报文中</li><li>请求首部：提供更多有关请求的信息</li><li>响应首部：提供更多有关响应的信息</li><li>实体首部：描述主体的长度和内容，或者资源自身</li><li>拓展首部：规范中未定义的新首部</li></ul><p>每个HTTP首部都有一种简单的语法：名字后面跟着冒号（：），然后跟上可选的空格，再跟上字段值，最后是一个CRLF。</p><h3 id="方法">方法</h3><p><strong>GET:</strong> 最常用的方法，通常用于请求服务器发送某个资源。（HTTP/1.0），一般是幂等（一项操作被称为幂等的表示这项操作执行任意多次和执行一次的结果是完全一样的）**HEAD：**于GET方法类似，但服务器在响应中只返回首部，不会返回实体的主体部分。通常用于：（HTTP/1.0）</p><ul><li>在不获取资源的情况下了解资源的情况</li><li>通过查看响应中的状态码，看某个对象是否存在。</li><li>通过查看首部，测试资源是否被修改了</li></ul><p><strong>PUT：</strong> 向服务器写入文档，用于向服务器上的资源（例如文件）中存储数据</p><p><strong>POST：</strong> 向服务器发送数据，广泛运用于表单提交（HTTP/1.0）</p><p><strong>TRACE：</strong> 用于诊断，验证请求是否如愿穿过了请求/响应链。（缺陷：他假定中间应用程序对不同类型请求的处理是相同的，然而很多HTTP应用会根据不同方法作出不同的事情，那么有可能代理会将POST直接发送给服务器，而将GET请求发送给另一个HTTP应用程序），ps：该请求中不允许带有实体部分，响应的实体主体部分包含了响应服务器收到的请求的精确副本。</p><p><strong>OPTIONS：</strong> 可以不用实际访问资源就能获取Web服务器支持的各种功能。比如通常支持哪种方法，或者对某些特殊资源支持哪些方法，从而判定访问各处资源的最优方式。</p><p><strong>DELETE：</strong> 顾名思义删除请求URL所指定的资源，但无法保证删除操作一定被执行。因为HTTP规范允许服务器在不通知客户端的情况下撤销请求。</p><p><strong>拓展方法：</strong> 顾名思义就是没有在HTTP/1.1规范中定义的方法。比如LOCK，COPY，MOVE。</p><h3 id="常见首部实例">常见首部实例</h3><p>如图所示为维客一个POST请求：</p><p>&lt;General：&gt;<br><strong>Request URL：</strong> 最终请求资源地址<br><strong>Request Method：</strong> 请求的方法<br><strong>Status Code：</strong> 请求状态码<br><strong>Remote Address：</strong> 远程服务器地址<br><strong>Referrer Policy：</strong> request headers（请求头部）中的referer。（该请求使用的是在同等安全等级下（例如https页面请求https地址），发送referer，但当请求方低于发送方（例如https页面请求http地址），不发送referer）</p><p>&lt;Response Headers：&gt;<br><strong>Connection：</strong> 告诉服务器本次连接是长连接。不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache)中设定这个时间。close为关闭长连接。<br><strong>Content-Type：</strong> 返回内容的MIME类型<br><strong>Date：</strong> 原始服务器消息发出的时间<br><strong>Server：</strong> web服务器软件名称（维客这个是由淘宝网发起的Web服务器项目）<br><strong>Set-Cookie：</strong> 用来在浏览器种cookie，一旦被种下，当浏览器访问符合条件的url地址时，会自动带上这个cookie<br><strong>Transfer-Encoding：</strong> 文件传输编码（分块编码(chunked))。一种数据传输机制，允许HTTP由应用服务器发送给客户端应用（ 通常是网页浏览器）的数据可以分成多个部分。分块传输编码只在HTTP协议1.1版本（HTTP/1.1）中提供</p><p>&lt;Request Headers：&gt;<br><strong>Accept：</strong> 代表浏览器可以接收的数据类型<br><strong>Accept-Encoding：</strong> 代表浏览器可以接收压缩的数据<strong>Accept-Language：</strong> 代表客户端浏览器的语言<br><strong>Cache-Control：</strong> 告诉所有的缓存机制是否可以缓存及哪种类型（所有内容都不会被缓存）<br><strong>Content-Length：</strong> 报文中实体主体的大小<br><strong>Content-Type：</strong> 实体主体MIME类型（当action为get时候，客户端把form数据转换成一个字串append到url后面，用?分割。当action为post时候，浏览器把form数据封装到http body中，然后发送到server。并指定文本编码格式）<br><strong>Cookie：</strong> 用于维持服务端会话状态的，通常由服务端写入，在后续请求中，供服务端读取。Cookie的使用过程：</p><ol><li>server通过HTTP Response中的&quot;Set-Cookie: header&quot;把cookie发送给client</li><li>client把cookie通过HTTP Request 中的“Cookie: header”发送给server</li><li>每次HTTP请求，Cookie都会被发送。</li></ol><p><strong>Pragma：</strong> 优先级是高于Cache-Control，html里面的mate标签中指定no-catch，不过仅在IE中有效<br><strong>Referer：</strong> 访问的域名地址，由浏览器生成，并不是所有浏览器都会设置该值。可以伪造，并不可信<br><strong>User-Agent：</strong> 代表的是客户端浏览器</p><h2 id="http演变过程">HTTP演变过程</h2><h3 id="起源">起源</h3><p>是由蒂姆·伯纳斯-李于1989年在欧洲核子研究组织（CERN）所发起，标准制定由万维网协会（World Wide Web Consortium，W3C）和互联网工程任务组（Internet Engineering Task Force，IETF）进行协调，最终发布了一系列的RFC。</p><h3 id="版本演化">版本演化</h3><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:center">版本</th><th style="text-align:left">特性</th><th style="text-align:left">改进</th><th style="text-align:left">缺陷</th></tr></thead><tbody><tr><td style="text-align:center">1990</td><td style="text-align:center">HTTP/0.9</td><td style="text-align:left">只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。</td><td style="text-align:left"></td><td style="text-align:left">功能单一，由于不支持POST客户端无法向服务器传递太多信息</td></tr><tr><td style="text-align:center">1996</td><td style="text-align:center">HTTP/1.0</td><td style="text-align:left">第一个在通讯中指定版本号的HTTP协议版本，至今仍被广泛采用，特别是在代理服务器中。</td><td style="text-align:left">任何格式的内容都可以发送。可以<strong>传输文字，图像、视频、二进制文件</strong>。还引入了<strong>POST和HEAD</strong>。HTTP请求和回应的格式必须包括<strong>头信息（HTTP header）<strong>新增还包括</strong>状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等</strong></td><td style="text-align:left">规定浏览器与服务器<strong>只保持短暂的连接</strong>，浏览器的每次请求都需要与服务器建立一个TCP连接。为此引入<strong>keep-alive</strong>连接，默认关闭，需主动打开。</td></tr><tr><td style="text-align:center">1997</td><td style="text-align:center">HTTP/1.1</td><td style="text-align:left">当前广泛使用版本</td><td style="text-align:left">引入<strong>持久连接</strong>，默认情况激活。<strong>管道化连接</strong>，将多条请求放入队列。新增动词：<strong>PUT、PATCH、HEAD、 OPTIONS、DELETE</strong></td><td style="text-align:left">同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这称为<strong>队头堵塞</strong></td></tr><tr><td style="text-align:center">2015</td><td style="text-align:center">HTTP/2.0</td><td style="text-align:left">关注性能大幅提升</td><td style="text-align:left">对HTTP头字段进行<strong>数据压缩(即HPACK算法)</strong>。新增<strong>服务端推送(Server Push)</strong>，即接收到客户端主请求，能够“预测”主请求的依赖资源，在响应主请求的同时，主动并发推送依赖资源至客户端。请求<strong>管线化</strong></td><td style="text-align:left">从 HTTP/1.1 转向 HTTP/2 势必是漫长的，升级容易，但只要绝大多数人使用老旧浏览器，则会很麻烦</td></tr></tbody></table><h2 id="http是如何工作的">HTTP是如何工作的</h2><h3 id="http连接">HTTP连接</h3><p>HTTP连接是HTTP报文传输的关键通道，世界上几乎所有的HTTP通信都是由TCP/IP承载的。HTTP连接实际上就是TCP连接及其使用规则。</p><h4 id="tcpip">TCP/IP</h4><p>1、具体含义：TCP/IP是全球计算机及网络设备都在使用的一种常用的分组交换网络分层协议集。一般来说，TCP/IP是利用IP进行通信时所必须用到的协议群的统称。具体来说IP或ICMP、TCP或UDP、TELENT或FTP、以及HTTP等都属于TCP/IP协议。</p><p>如图所示：HTTP即位于Application层（HTTPS则是在Application层和Transport层增加安全层），TCP则位于Transport层，IP位于Internet层：TCP/IP四层模型分为应用层、运输层、网络层、数据链路层<img src="http://www.nomiwan.com/TCP:IP%E5%8D%8F%E8%AE%AE%E7%BE%A4.png" alt="TCP/IP"></p><p>3、传输形式：HTTP以流的形式将报文数据的内容通过一条打开的TCP连接按序传输，TCP将数据流砍成段，封装在IP分组中。通过英特网进行传输。如图所示：<img src="http://www.nomiwan.com/TCP%E6%95%B0%E6%8D%AE%E6%B5%81.png" alt="TCP数据流"></p><h4 id="tcp连接">TCP连接</h4><p>如图所示是一次web浏览器与web服务器之间连接的步骤：<img src="http://www.nomiwan.com/TCP:IP%E8%BF%9E%E6%8E%A5.png" alt="TCP/IP连接"></p><p>三次握手以及四次挥手均为实现数据的可靠传输，TCP要在应用进程间建立传输连接。它是在两个传输用户之间建立一种逻辑联系，使得通信双方都确认对方为自己的传输连接端点。<img src="http://www.nomiwan.com/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%8A%A8%E5%9B%BE.gif" alt="四次挥手"></p><h3 id="http架构">HTTP架构</h3><p>这里有几个概念：<br><strong>WEB服务器：</strong> 可以用来表示Web服务器的软件，也可以用来表示提供Web页面的特定设备或计算机。会对HTTP请求进行处理并提供响应<br><strong>WEB代理服务器：</strong> 位于客户端和服务器之间，扮演“中间人”的角色。即是客户端又是Web服务器<br><strong>WEB缓存：</strong> 是可以自动保存常见文档副本的HTTP设备。<br><strong>网关：</strong> 在HTTP和其他协议及应用程序之间起到接口作用，是资源和应用程序之间的粘合剂。如：服务器协议转换器、服务端安全网关、客户端安全网关、应用程序服务器。<br><strong>隧道：</strong> 允许用户通过HTTP连接发送非HTTP流量<br><strong>中继：</strong> 负责处理HTTP中建立连接的部分，然后对字节进行盲转发（有一个哑代理的问题）</p><h3 id="http优化和加速">HTTP优化和加速</h3><h4 id="延时原因">延时原因</h4><p>HTTP紧挨着TCP，位于其上层，因此HTTP事务的性能很大程度上取决于底层TCP通道的性能。与建立TCP连接以及传输请求和响应报文的时间相比，事务处理时间可能很短，除非特殊情况。大多数情况下HTTP延时是由TCP网络时延构成的。以下列举影响速度的原因</p><ol><li>若最近没有对URI中的主机名进行访问，通过DNS解析主机名为IP地址需要花费数十秒时间（DNS缓存）</li><li>客户端发送一条TCP连接请求，并等待请求接受应答，每条TCP连接都有连接建立时延，通常最多只有一两秒，但叠加起来</li><li>传输请求报文以及服务器处理请求报文时间</li><li>回传响应报文</li></ol><blockquote><p>TCP网络延迟时间大小取决于硬件的速度、网络和服务器的负载、请求和响应报文的尺寸、客户端与服务器之间的距离等。</p></blockquote><h4 id="http连接优化">HTTP连接优化</h4><p><strong>串行连接：</strong> 每个事务都需要建立一条新的TCP连接</p><p>如图所示原始的串行事务处理：<br><img src="http://www.nomiwan.com/%E4%B8%B2%E8%A1%8C%E8%BF%9E%E6%8E%A5.png" alt="串行连接">缺陷：TCP的性能延时可能叠加起来，视觉上会让人觉得很慢，比如加载图片。</p><p><strong>并行连接：</strong> 通过多条TCP连接发起并发的HTTP请求。</p><p>目前浏览器使用了并行连接，如图所示：<img src="http://www.nomiwan.com/%E5%B9%B6%E8%A1%8C%E8%BF%9E%E6%8E%A5.png" alt="浏览器并行连接"></p><p>如图为并行连接时间线：<img src="http://www.nomiwan.com/%E5%B9%B6%E8%A1%8C%E8%BF%9E%E6%8E%A5%E5%9B%BE%E7%A4%BA.png" alt="并行连接">缺陷：有可能受带宽的限制，每个对象都按照较慢的速度加载，打开大量连接会消耗很多内存资源，从而引发自身的性能问题。因此浏览器会将并行连接数限制一个较小的数。</p><p><strong>持久连接：</strong> 在事务处理结束之后仍然保持在打开状态的TCP连接。</p><p>如图为持久连接时间线：<img src="http://www.nomiwan.com/%E6%8C%81%E4%B9%85%E8%BF%9E%E6%8E%A5.png" alt="持久连接">缺陷：有可能累积大量的空闲连接。有可能因为盲中继使浏览器一直处于挂起的状态<br>现代浏览器通常是使用并行连接+持久连接</p><p><strong>管道化连接：</strong> 在响应到达之前，可以讲多条请求放入队列。</p><p>如图为管道化连接时间线：<img src="http://www.nomiwan.com/%E7%AE%A1%E9%81%93%E5%8C%96%E8%BF%9E%E6%8E%A5.png" alt="管道化连接"></p><p>管道化连接的限制，由于实现复杂，不易调试，不标准的代理导致管道化会出现很多问题，因此浏览器默认状态下并不激活：<br>1. 连接必须是持久的<br>2. 响应的顺序与请求的顺序应相同<br>3. 客户端需有应对过早关闭连接的情况<br>4. 不要通过管道化连接使用产生副作用的请求（例如POST），因为存在不会执行的风险</p><p><strong>其他优化</strong></p><p>TCP连接复用：将前端多个客户的HTTP请求复用到后端与服务器建立的一个TCP连接上如图：<img src="http://www.nomiwan.com/TCP%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF.png" alt="TCP复用">优点：减小服务器的性能负载，减少与服务器之间新建TCP连接所带来的延时，并最大限度的降低客户端对后端服务器的并发连接数请求，减少服务器的资源占用。</p><p>HTTP压缩：对内容进行编码，比如gzip来压缩html,javascript, CSS文件，减少网络传输的数据量，提高了速度。<img src="http://www.nomiwan.com/HTTP%E5%8E%8B%E7%BC%A9.png" alt="HTTP压缩"></p><p>负载均衡技术：TCP连接复用、内容缓存、TCP缓冲、HTTP压缩、SSL加速<br>阿里云塔内负载均衡价格：据说一年1万元</p><h2 id="http应用">HTTP应用</h2><p>1、手写http连接2、关于文件传输</p><h2 id="http2http的未来">HTTP/2:HTTP的未来</h2><p>2015年5月, HTTP/2.0 正式发表</p><h3 id="如何使用上-http20">如何使用上 HTTP/2.0</h3><ol><li>客户端支持，目前最新版各大浏览器都已支持</li><li>WEB服务器支持</li></ol><h3 id="新增特性">新增特性</h3><p><strong>二进制分帧</strong> 在应用层与传输层之间增加一个二进制分帧层。HTTP2.0会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。</p><p><strong>压缩头部</strong> 客户端和服务器端会使用并且维护「首部表」来跟踪和存储之前发送的键值对，因此重复的头部不必再请求发送。新增或修改的首部帧会被追加到“首部表”</p><p><strong>多路复用</strong> 在一条连接上发送无数个请求，并且响应可以同时返回。也就是说在一个连接上可以承载任意数量的双向数据流。因此之前所做的合并 JS、CSS 文件技巧，反而不适用了</p><p><strong>请求优先级</strong> 即所有资源都是并行发送，那么就需要「优先级」的概念了，这样就可以对重要的文件进行先传输，加速页面的渲染</p><p><strong>服务器推送</strong> 还没有收到浏览器的请求，服务器就把各种资源推送给浏览器。比如请求了一个index.html，服务器就主动把里面的css、js全部发送给浏览器</p><p><strong>强制 SSL</strong> 浏览器强制要求使用 HTTP/2.0 必须要用上 SSL</p><h3 id="对优化的影响">对优化的影响</h3><ol><li>没有必要合并文件，制作雪碧图来减少连接数，因为只有一个连接。</li><li>因为资源都是并行交错发送，且没有限制，不需要浏览器对同一域名的链接数的限制</li><li>内嵌资源的优化手段也变得没有意义了<br>其实1、3优化都是为了减少连接数，而HTTP/2的多路复用的特点就是一条连接并行交错发送资源、且没有限制</li></ol><p>1、HTTP/2与HTTP/1.1的比较</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>如图：<img src="http://www.nomiwan.com/7%E5%B1%82OSI%E6%A8%A1%E5%9E%8B.jpg" alt="7层OSI模型的应用层"> <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>有静态文件，也有<strong>动态内容。静态资源</strong>包括<em>文本文件、HTML文件、Word文件、图片文件、视频文件</em>等。动态内容即是根据身份、所求信息、不同时段产生不同内容。并通过<strong>MIME</strong>来描述并标记媒体内容例如：<code>Content-type: image/jpeg</code> <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3" class="footnote-item"><p>称为统一资源标识符（Uniform Resource Identifier），有两种形式分别称为<strong>URL（统一资源定位符）<strong>和</strong>URN（统一资源名）</strong>。URL由三部分组成<em>协议类型</em>（<code>http://</code>）、<em>服务器的英特网地址</em>（www.google.com）、<em>服务器上的某个资源</em>（/images/example.jpg）例如：<a href="http://www.google.com/images/example.jpg" target="_blank" rel="noopener">http://www.google.com/images/example.jpg</a> <a href="#fnref3" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
